//
// Copyright (c) 2021 Markku Rossi.
//
// All rights reserved.
//

type CK_BBOOL	         bool
type CK_BYTE	       = byte
type CK_CHAR	       = byte
type CK_ULONG	         uint32
type CK_ULONG_PTR       *uint32
type CK_UTF8CHAR       = byte
type CK_VOID_PTR       = byte
type CK_FLAGS	         uint32
type CK_SESSION_HANDLE   uint32
type CK_OBJECT_HANDLE    uint32
type CK_OBJECT_CLASS     uint32
type CK_ATTRIBUTE_TYPE   uint32
type CK_SLOT_ID	         Ulong
type CK_SLOT_ID_PTR     *uint32
type CK_MECHANISM_TYPE   Ulong
type CK_USER_TYPE        uint32
type CK_KEY_TYPE         uint32

type CK_ATTRIBUTE struct {
                       CK_ATTRIBUTE_TYPE type
  [CK_ULONG ulValueLen]CK_BYTE           pValue
}

type []Attribute => Template

type CK_VERSION struct {
  CK_BYTE major
  CK_BYTE minor
}

type CK_INFO struct {
      CK_VERSION  cryptokiVersion
  [32]CK_UTF8CHAR manufacturerID
      CK_FLAGS    flags
  [32]CK_UTF8CHAR libraryDescription
      CK_VERSION  libraryVersion
}

type CK_SLOT_INFO struct {
  [64]CK_UTF8CHAR slotDescription
  [32]CK_UTF8CHAR manufacturerID
      CK_FLAGS    flags
      CK_VERSION  hardwareVersion
      CK_VERSION  firmwareVersion
}

type CK_TOKEN_INFO struct {
  [32]CK_UTF8CHAR label
  [32]CK_UTF8CHAR manufacturerID
  [16]CK_UTF8CHAR model
  [16]CK_CHAR     serialNumber
      CK_FLAGS    flags
      CK_ULONG    ulMaxSessionCount
      CK_ULONG    ulSessionCount
      CK_ULONG    ulMaxRwSessionCount
      CK_ULONG    ulRwSessionCount
      CK_ULONG    ulMaxPinLen
      CK_ULONG    ulMinPinLen
      CK_ULONG    ulTotalPublicMemory
      CK_ULONG    ulFreePublicMemory
      CK_ULONG    ulTotalPrivateMemory
      CK_ULONG    ulFreePrivateMemory
      CK_VERSION  hardwareVersion
      CK_VERSION  firmwareVersion
  [16]CK_CHAR     utcTime
}

type CK_SESSION_INFO struct {
  CK_ULONG slotID
  CK_ULONG state
  CK_ULONG flags
  CK_ULONG ulDeviceError
}

type CK_MECHANISM_INFO struct {
  CK_ULONG ulMinKeySize
  CK_ULONG ulMaxKeySize
  CK_FLAGS flags
}

type CK_MECHANISM struct {
                           CK_MECHANISM_TYPE mechanism
  [CK_ULONG ulParameterLen]CK_VOID_PTR       pParameter
}

encoder CK_MECHANISM = vp_encode_mechanism

type CK_GCM_PARAMS struct {
   [CK_ULONG ulIvLen]CK_BYTE  pIv
                     CK_ULONG ulIvBits
  [CK_ULONG ulAADLen]CK_BYTE  pAAD
                     CK_ULONG ulTagBits
}
