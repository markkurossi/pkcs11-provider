// This file is auto-generated by rpcc.
//
// Copyright (C) 2021 Markku Rossi.
//
// All rights reserved.
//

package ipc

import (
	"log"
)

// CKAttributeType defines basic protocol type CK_ATTRIBUTE_TYPE.
type CKAttributeType uint32

// CKBbool defines basic protocol type CK_BBOOL.
type CKBbool bool

// CKByte defines basic protocol type CK_BYTE.
type CKByte = byte

// CKChar defines basic protocol type CK_CHAR.
type CKChar = byte

// CKFlags defines basic protocol type CK_FLAGS.
type CKFlags uint32

// CKMechanismType defines basic protocol type CK_MECHANISM_TYPE.
type CKMechanismType uint32

// CKObjectHandle defines basic protocol type CK_OBJECT_HANDLE.
type CKObjectHandle uint32

// CKSessionHandle defines basic protocol type CK_SESSION_HANDLE.
type CKSessionHandle uint32

// CKSlotID defines basic protocol type CK_SLOT_ID.
type CKSlotID uint32

// CKSlotIDPtr defines basic protocol type CK_SLOT_ID_PTR.
type CKSlotIDPtr uint32

// CKUlong defines basic protocol type CK_ULONG.
type CKUlong uint32

// CKUlongPtr defines basic protocol type CK_ULONG_PTR.
type CKUlongPtr uint32

// CKUserType defines basic protocol type CK_USER_TYPE.
type CKUserType uint32

// CKUTF8Char defines basic protocol type CK_UTF8CHAR.
type CKUTF8Char = byte

// CKVoidPtr defines basic protocol type CK_VOID_PTR.
type CKVoidPtr = byte

// CKAttribute defines compound protocol type CK_ATTRIBUTE.
type CKAttribute struct {
	Type  CKAttributeType
	Value []CKVoidPtr
}

// CKInfo defines compound protocol type CK_INFO.
type CKInfo struct {
	CryptokiVersion    CKVersion
	ManufacturerID     [32]CKUTF8Char
	Flags              CKFlags
	LibraryDescription [32]CKUTF8Char
	LibraryVersion     CKVersion
}

// CKMechanism defines compound protocol type CK_MECHANISM.
type CKMechanism struct {
	Mechanism CKMechanismType
	Parameter []CKVoidPtr
}

// CKMechanismInfo defines compound protocol type CK_MECHANISM_INFO.
type CKMechanismInfo struct {
	MinKeySize CKUlong
	MaxKeySize CKUlong
	Flags      CKFlags
}

// CKSlotInfo defines compound protocol type CK_SLOT_INFO.
type CKSlotInfo struct {
	SlotDescription [64]CKUTF8Char
	ManufacturerID  [32]CKUTF8Char
	Flags           CKFlags
	HardwareVersion CKVersion
	FirmwareVersion CKVersion
}

// CKTokenInfo defines compound protocol type CK_TOKEN_INFO.
type CKTokenInfo struct {
	Label              [32]CKUTF8Char
	ManufacturerID     [32]CKUTF8Char
	Model              [16]CKUTF8Char
	SerialNumber       [16]CKChar
	Flags              CKFlags
	MaxSessionCount    CKUlong
	SessionCount       CKUlong
	MaxRwSessionCount  CKUlong
	RwSessionCount     CKUlong
	MaxPinLen          CKUlong
	MinPinLen          CKUlong
	TotalPublicMemory  CKUlong
	FreePublicMemory   CKUlong
	TotalPrivateMemory CKUlong
	FreePrivateMemory  CKUlong
	HardwareVersion    CKVersion
	FirmwareVersion    CKVersion
	UtcTime            [16]CKChar
}

// CKVersion defines compound protocol type CK_VERSION.
type CKVersion struct {
	Major CKByte
	Minor CKByte
}

// ImplOpenSessionReq defines the arguments of C_ImplOpenSession.
type ImplOpenSessionReq struct {
	ProviderID CKUlong
	Session    CKSessionHandle
}

// ImplCloseSessionReq defines the arguments of C_ImplCloseSession.
type ImplCloseSessionReq struct {
	Session CKSessionHandle
}

// InitializeResp defines the result of C_Initialize.
type InitializeResp struct {
	ProviderID CKUlong
}

// GetSlotListReq defines the arguments of C_GetSlotList.
type GetSlotListReq struct {
	TokenPresent CKBbool
	SlotListSize uint32
}

// GetSlotListResp defines the result of C_GetSlotList.
type GetSlotListResp struct {
	SlotListLen int
	SlotList    []CKSlotID
}

// GetSlotInfoReq defines the arguments of C_GetSlotInfo.
type GetSlotInfoReq struct {
	SlotID CKSlotID
}

// GetSlotInfoResp defines the result of C_GetSlotInfo.
type GetSlotInfoResp struct {
	Info CKSlotInfo
}

// GetTokenInfoReq defines the arguments of C_GetTokenInfo.
type GetTokenInfoReq struct {
	SlotID CKSlotID
}

// GetTokenInfoResp defines the result of C_GetTokenInfo.
type GetTokenInfoResp struct {
	Info CKTokenInfo
}

// GetMechanismListReq defines the arguments of C_GetMechanismList.
type GetMechanismListReq struct {
	SlotID            CKSlotID
	MechanismListSize uint32
}

// GetMechanismListResp defines the result of C_GetMechanismList.
type GetMechanismListResp struct {
	MechanismListLen int
	MechanismList    []CKMechanismType
}

// GetMechanismInfoReq defines the arguments of C_GetMechanismInfo.
type GetMechanismInfoReq struct {
	SlotID CKSlotID
	Type   CKMechanismType
}

// GetMechanismInfoResp defines the result of C_GetMechanismInfo.
type GetMechanismInfoResp struct {
	Info CKMechanismInfo
}

// InitTokenReq defines the arguments of C_InitToken.
type InitTokenReq struct {
	SlotID CKSlotID
	Pin    []CKUTF8Char
	Label  [32]CKUTF8Char
}

// InitPINReq defines the arguments of C_InitPIN.
type InitPINReq struct {
	Pin []CKUTF8Char
}

// SetPINReq defines the arguments of C_SetPIN.
type SetPINReq struct {
	OldPin []CKUTF8Char
	NewPin []CKUTF8Char
}

// OpenSessionReq defines the arguments of C_OpenSession.
type OpenSessionReq struct {
	SlotID CKSlotID
	Flags  CKFlags
}

// OpenSessionResp defines the result of C_OpenSession.
type OpenSessionResp struct {
	Session CKSessionHandle
}

// LoginReq defines the arguments of C_Login.
type LoginReq struct {
	UserType CKUserType
	Pin      []CKUTF8Char
}

// DestroyObjectReq defines the arguments of C_DestroyObject.
type DestroyObjectReq struct {
	Object CKObjectHandle
}

// GetObjectSizeReq defines the arguments of C_GetObjectSize.
type GetObjectSizeReq struct {
	Object CKObjectHandle
}

// GetObjectSizeResp defines the result of C_GetObjectSize.
type GetObjectSizeResp struct {
	Size CKUlong
}

// DigestInitReq defines the arguments of C_DigestInit.
type DigestInitReq struct {
	Mechanism CKMechanism
}

// DigestReq defines the arguments of C_Digest.
type DigestReq struct {
	Data       []CKByte
	DigestSize uint32
}

// DigestResp defines the result of C_Digest.
type DigestResp struct {
	DigestLen int
	Digest    []CKByte
}

// DigestUpdateReq defines the arguments of C_DigestUpdate.
type DigestUpdateReq struct {
	Part []CKByte
}

// DigestFinalReq defines the arguments of C_DigestFinal.
type DigestFinalReq struct {
	DigestSize uint32
}

// DigestFinalResp defines the result of C_DigestFinal.
type DigestFinalResp struct {
	DigestLen int
	Digest    []CKByte
}

// SeedRandomReq defines the arguments of C_SeedRandom.
type SeedRandomReq struct {
	Seed []CKByte
}

// GenerateRandomReq defines the arguments of C_GenerateRandom.
type GenerateRandomReq struct {
	RandomLen CKUlong
}

// GenerateRandomResp defines the result of C_GenerateRandom.
type GenerateRandomResp struct {
	RandomData []CKByte
}

// Provider defines the PKCS #11 provider interface.
type Provider interface {
	ImplOpenSession(req *ImplOpenSessionReq) error
	ImplCloseSession(req *ImplCloseSessionReq) error
	Initialize() (*InitializeResp, error)
	GetSlotList(req *GetSlotListReq) (*GetSlotListResp, error)
	GetSlotInfo(req *GetSlotInfoReq) (*GetSlotInfoResp, error)
	GetTokenInfo(req *GetTokenInfoReq) (*GetTokenInfoResp, error)
	GetMechanismList(req *GetMechanismListReq) (*GetMechanismListResp, error)
	GetMechanismInfo(req *GetMechanismInfoReq) (*GetMechanismInfoResp, error)
	InitToken(req *InitTokenReq) error
	InitPIN(req *InitPINReq) error
	SetPIN(req *SetPINReq) error
	OpenSession(req *OpenSessionReq) (*OpenSessionResp, error)
	Login(req *LoginReq) error
	DestroyObject(req *DestroyObjectReq) error
	GetObjectSize(req *GetObjectSizeReq) (*GetObjectSizeResp, error)
	FindObjectsFinal() error
	DigestInit(req *DigestInitReq) error
	Digest(req *DigestReq) (*DigestResp, error)
	DigestUpdate(req *DigestUpdateReq) error
	DigestFinal(req *DigestFinalReq) (*DigestFinalResp, error)
	SeedRandom(req *SeedRandomReq) error
	GenerateRandom(req *GenerateRandomReq) (*GenerateRandomResp, error)
}

// Base provides a dummy implementation of the Provider interface.
type Base struct{}

// ImplOpenSession implements the Provider.ImplOpenSession().
func (b *Base) ImplOpenSession(req *ImplOpenSessionReq) error {
	return ErrFunctionNotSupported
}

// ImplCloseSession implements the Provider.ImplCloseSession().
func (b *Base) ImplCloseSession(req *ImplCloseSessionReq) error {
	return ErrFunctionNotSupported
}

// Initialize implements the Provider.Initialize().
func (b *Base) Initialize() (*InitializeResp, error) {
	return nil, ErrFunctionNotSupported
}

// GetSlotList implements the Provider.GetSlotList().
func (b *Base) GetSlotList(req *GetSlotListReq) (*GetSlotListResp, error) {
	return nil, ErrFunctionNotSupported
}

// GetSlotInfo implements the Provider.GetSlotInfo().
func (b *Base) GetSlotInfo(req *GetSlotInfoReq) (*GetSlotInfoResp, error) {
	return nil, ErrFunctionNotSupported
}

// GetTokenInfo implements the Provider.GetTokenInfo().
func (b *Base) GetTokenInfo(req *GetTokenInfoReq) (*GetTokenInfoResp, error) {
	return nil, ErrFunctionNotSupported
}

// GetMechanismList implements the Provider.GetMechanismList().
func (b *Base) GetMechanismList(req *GetMechanismListReq) (*GetMechanismListResp, error) {
	return nil, ErrFunctionNotSupported
}

// GetMechanismInfo implements the Provider.GetMechanismInfo().
func (b *Base) GetMechanismInfo(req *GetMechanismInfoReq) (*GetMechanismInfoResp, error) {
	return nil, ErrFunctionNotSupported
}

// InitToken implements the Provider.InitToken().
func (b *Base) InitToken(req *InitTokenReq) error {
	return ErrFunctionNotSupported
}

// InitPIN implements the Provider.InitPIN().
func (b *Base) InitPIN(req *InitPINReq) error {
	return ErrFunctionNotSupported
}

// SetPIN implements the Provider.SetPIN().
func (b *Base) SetPIN(req *SetPINReq) error {
	return ErrFunctionNotSupported
}

// OpenSession implements the Provider.OpenSession().
func (b *Base) OpenSession(req *OpenSessionReq) (*OpenSessionResp, error) {
	return nil, ErrFunctionNotSupported
}

// Login implements the Provider.Login().
func (b *Base) Login(req *LoginReq) error {
	return ErrFunctionNotSupported
}

// DestroyObject implements the Provider.DestroyObject().
func (b *Base) DestroyObject(req *DestroyObjectReq) error {
	return ErrFunctionNotSupported
}

// GetObjectSize implements the Provider.GetObjectSize().
func (b *Base) GetObjectSize(req *GetObjectSizeReq) (*GetObjectSizeResp, error) {
	return nil, ErrFunctionNotSupported
}

// FindObjectsFinal implements the Provider.FindObjectsFinal().
func (b *Base) FindObjectsFinal() error {
	return ErrFunctionNotSupported
}

// DigestInit implements the Provider.DigestInit().
func (b *Base) DigestInit(req *DigestInitReq) error {
	return ErrFunctionNotSupported
}

// Digest implements the Provider.Digest().
func (b *Base) Digest(req *DigestReq) (*DigestResp, error) {
	return nil, ErrFunctionNotSupported
}

// DigestUpdate implements the Provider.DigestUpdate().
func (b *Base) DigestUpdate(req *DigestUpdateReq) error {
	return ErrFunctionNotSupported
}

// DigestFinal implements the Provider.DigestFinal().
func (b *Base) DigestFinal(req *DigestFinalReq) (*DigestFinalResp, error) {
	return nil, ErrFunctionNotSupported
}

// SeedRandom implements the Provider.SeedRandom().
func (b *Base) SeedRandom(req *SeedRandomReq) error {
	return ErrFunctionNotSupported
}

// GenerateRandom implements the Provider.GenerateRandom().
func (b *Base) GenerateRandom(req *GenerateRandomReq) (*GenerateRandomResp, error) {
	return nil, ErrFunctionNotSupported
}

var msgTypeNames = map[Type]string{
	0xc0000101: "ImplOpenSession",
	0xc0000102: "ImplCloseSession",
	0xc0050401: "Initialize",
	0xc0050501: "GetSlotList",
	0xc0050502: "GetSlotInfo",
	0xc0050503: "GetTokenInfo",
	0xc0050505: "GetMechanismList",
	0xc0050506: "GetMechanismInfo",
	0xc0050507: "InitToken",
	0xc0050508: "InitPIN",
	0xc0050509: "SetPIN",
	0xc0050601: "OpenSession",
	0xc0050608: "Login",
	0xc0050703: "DestroyObject",
	0xc0050704: "GetObjectSize",
	0xc0050709: "FindObjectsFinal",
	0xc0050c01: "DigestInit",
	0xc0050c02: "Digest",
	0xc0050c03: "DigestUpdate",
	0xc0050c05: "DigestFinal",
	0xc0051301: "SeedRandom",
	0xc0051302: "GenerateRandom",
}

// Dispatch dispatches the message to provider and returns the message
// response.
func Dispatch(p Provider, msgType Type, req []byte) (CKRV, []byte) {
	resp, err := call(p, msgType, req)
	if err != nil {
		ckrv, ok := err.(CKRV)
		if ok {
			return ckrv, nil
		}
		log.Printf("dispatch error: %s", err)
		return ErrDataInvalid, nil
	}
	return ErrOk, resp
}

func call(p Provider, msgType Type, data []byte) ([]byte, error) {
	switch msgType {
	case 0xc0000101: // ImplOpenSession
		var req ImplOpenSessionReq
		if err := Unmarshal(data, &req); err != nil {
			return nil, err
		}
		return nil, p.ImplOpenSession(&req)

	case 0xc0000102: // ImplCloseSession
		var req ImplCloseSessionReq
		if err := Unmarshal(data, &req); err != nil {
			return nil, err
		}
		return nil, p.ImplCloseSession(&req)

	case 0xc0050401: // Initialize
		resp, err := p.Initialize()
		if err != nil {
			return nil, err
		}
		return Marshal(resp)

	case 0xc0050501: // GetSlotList
		var req GetSlotListReq
		if err := Unmarshal(data, &req); err != nil {
			return nil, err
		}
		resp, err := p.GetSlotList(&req)
		if err != nil {
			return nil, err
		}
		return Marshal(resp)

	case 0xc0050502: // GetSlotInfo
		var req GetSlotInfoReq
		if err := Unmarshal(data, &req); err != nil {
			return nil, err
		}
		resp, err := p.GetSlotInfo(&req)
		if err != nil {
			return nil, err
		}
		return Marshal(resp)

	case 0xc0050503: // GetTokenInfo
		var req GetTokenInfoReq
		if err := Unmarshal(data, &req); err != nil {
			return nil, err
		}
		resp, err := p.GetTokenInfo(&req)
		if err != nil {
			return nil, err
		}
		return Marshal(resp)

	case 0xc0050505: // GetMechanismList
		var req GetMechanismListReq
		if err := Unmarshal(data, &req); err != nil {
			return nil, err
		}
		resp, err := p.GetMechanismList(&req)
		if err != nil {
			return nil, err
		}
		return Marshal(resp)

	case 0xc0050506: // GetMechanismInfo
		var req GetMechanismInfoReq
		if err := Unmarshal(data, &req); err != nil {
			return nil, err
		}
		resp, err := p.GetMechanismInfo(&req)
		if err != nil {
			return nil, err
		}
		return Marshal(resp)

	case 0xc0050507: // InitToken
		var req InitTokenReq
		if err := Unmarshal(data, &req); err != nil {
			return nil, err
		}
		return nil, p.InitToken(&req)

	case 0xc0050508: // InitPIN
		var req InitPINReq
		if err := Unmarshal(data, &req); err != nil {
			return nil, err
		}
		return nil, p.InitPIN(&req)

	case 0xc0050509: // SetPIN
		var req SetPINReq
		if err := Unmarshal(data, &req); err != nil {
			return nil, err
		}
		return nil, p.SetPIN(&req)

	case 0xc0050601: // OpenSession
		var req OpenSessionReq
		if err := Unmarshal(data, &req); err != nil {
			return nil, err
		}
		resp, err := p.OpenSession(&req)
		if err != nil {
			return nil, err
		}
		return Marshal(resp)

	case 0xc0050608: // Login
		var req LoginReq
		if err := Unmarshal(data, &req); err != nil {
			return nil, err
		}
		return nil, p.Login(&req)

	case 0xc0050703: // DestroyObject
		var req DestroyObjectReq
		if err := Unmarshal(data, &req); err != nil {
			return nil, err
		}
		return nil, p.DestroyObject(&req)

	case 0xc0050704: // GetObjectSize
		var req GetObjectSizeReq
		if err := Unmarshal(data, &req); err != nil {
			return nil, err
		}
		resp, err := p.GetObjectSize(&req)
		if err != nil {
			return nil, err
		}
		return Marshal(resp)

	case 0xc0050709: // FindObjectsFinal
		return nil, p.FindObjectsFinal()

	case 0xc0050c01: // DigestInit
		var req DigestInitReq
		if err := Unmarshal(data, &req); err != nil {
			return nil, err
		}
		return nil, p.DigestInit(&req)

	case 0xc0050c02: // Digest
		var req DigestReq
		if err := Unmarshal(data, &req); err != nil {
			return nil, err
		}
		resp, err := p.Digest(&req)
		if err != nil {
			return nil, err
		}
		return Marshal(resp)

	case 0xc0050c03: // DigestUpdate
		var req DigestUpdateReq
		if err := Unmarshal(data, &req); err != nil {
			return nil, err
		}
		return nil, p.DigestUpdate(&req)

	case 0xc0050c05: // DigestFinal
		var req DigestFinalReq
		if err := Unmarshal(data, &req); err != nil {
			return nil, err
		}
		resp, err := p.DigestFinal(&req)
		if err != nil {
			return nil, err
		}
		return Marshal(resp)

	case 0xc0051301: // SeedRandom
		var req SeedRandomReq
		if err := Unmarshal(data, &req); err != nil {
			return nil, err
		}
		return nil, p.SeedRandom(&req)

	case 0xc0051302: // GenerateRandom
		var req GenerateRandomReq
		if err := Unmarshal(data, &req); err != nil {
			return nil, err
		}
		resp, err := p.GenerateRandom(&req)
		if err != nil {
			return nil, err
		}
		return Marshal(resp)

	default:
		return nil, ErrFunctionNotSupported
	}
}
